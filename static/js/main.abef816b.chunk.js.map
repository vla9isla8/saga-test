{"version":3,"sources":["logo.svg","components/Countdown.tsx","components/Counter.tsx","redux/action/counter.ts","containers/ReduxCounter.tsx","App.tsx","serviceWorker.ts","redux/reducer/counter.ts","redux/reducer/index.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Countdown","_ref","start","_React$useState","React","_React$useState2","Object","slicedToArray","time","setTime","sig","setInterval","clearInterval","react","Counter","counter","usedDelay","add","addAsync","reset","delay","setDelay","onAddAsync","onChangeDelay","e","target","value","onClick","type","onChange","disabled","components_Countdown","addCounterAsync","watchAddCounterAsync","timeout","Promise","resolve","setTimeout","clearDelay","action","regenerator_default","a","wrap","_context","prev","next","put","stop","_marked","_context2","takeEvery","_marked2","mapDispatchToProps","connect","count","App","react_default","createElement","className","src","logo","alt","ReduxCounter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","undefined","objectSpread2","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.abef816b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from \"react\";\n\nconst Countdown = ({start}:{start: number}) => {\n    const [time,setTime] = React.useState(start);\n    React.useEffect(() => {\n        let sig: NodeJS.Timeout;\n        sig = setInterval(() => setTime(time - 100),100);\n        return () => clearInterval(sig);\n    });\n    return <h4>{time}</h4>;\n}\n\nexport default Countdown;","import * as React from \"react\";\nimport Countdown from \"./Countdown\";\n\nexport type CounterProps = {\n    counter: number,\n    usedDelay: number | undefined,\n    add: ()=> void,\n    addAsync: (delay: number) => void,\n    reset: () => void\n}\n\nconst Counter = ({counter,usedDelay,add,addAsync,reset}:CounterProps) => {\n\n    const [delay,setDelay] = React.useState(0);\n\n    const onAddAsync = React.useCallback(() => addAsync(delay * 1000),[addAsync,delay]);\n\n    const onChangeDelay = React.useCallback((e) => setDelay(e.target.value),[]);\n\n    return <div>\n        <h3>{counter}</h3>    \n        <button onClick={add}>Add</button>\n        <input type=\"number\" value={delay} onChange={onChangeDelay} />\n        <button onClick={onAddAsync} disabled={!!usedDelay}>Add async</button>\n        <button onClick={reset}>Reset</button>\n        {usedDelay && <Countdown start={usedDelay}/>}\n    </div>;\n}\n\nexport default Counter;","import { put, takeEvery } from \"redux-saga/effects\";\nimport { ADD_COUNTER, ADD_COUNTER_ASYNC, CLEAR_COUNTER_DELAY, RESET_COUNTER, SET_COUNTER_DELAY } from \"../events/counter\";\n\nconst delay = (timeout: number) => {\n    return new Promise((resolve) => setTimeout(resolve,timeout));\n}\n\nexport const add = (): ADD_COUNTER => ({\n    type: \"COUNTER_ADD\"\n});\nexport const addAsync = (delay: number): ADD_COUNTER_ASYNC => ({\n    type: \"COUNTER_ADD_ASYNC\",\n    delay\n});\nexport const setDelay = (delay: number): SET_COUNTER_DELAY => ({\n    type: \"COUNTER_SET_DELAY\",\n    delay\n});\n\nexport const clearDelay = (): CLEAR_COUNTER_DELAY => ({\n    type: \"COUNTER_CLEAR_DELAY\"\n});\n\nexport const reset = (): RESET_COUNTER => ({\n    type: \"COUNTER_RESET\"\n});\n\nfunction* addCounterAsync(action: ADD_COUNTER_ASYNC) {\n    yield put(setDelay(action.delay));\n    yield delay(action.delay);\n    yield put(add());\n    yield put(clearDelay());\n}\n\nexport function* watchAddCounterAsync() {\n    yield takeEvery('COUNTER_ADD_ASYNC', addCounterAsync);\n}","import Counter, { CounterProps } from \"../components/Counter\";\nimport { connect } from \"react-redux\";\nimport { add, addAsync, reset } from \"../redux/action/counter\";\nimport { AppState } from \"../redux/reducer\";\n\nconst mapStateToProps = ({counter}:AppState) : Pick<CounterProps,\"counter\"> & Pick<CounterProps,\"usedDelay\"> => ({\n    counter: counter ? counter.count : 0,\n    usedDelay: counter && counter.usedDelay\n});\nconst mapDispatchToProps: Pick<CounterProps,\"add\"> & Pick<CounterProps,\"addAsync\"> & Pick<CounterProps,\"reset\"> = {\n    add,\n    addAsync,\n    reset\n};\nexport default connect(mapStateToProps,mapDispatchToProps)(Counter);","import React from 'react';\nimport './App.css';\nimport ReduxCounter from './containers/ReduxCounter';\nimport logo from './logo.svg';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <ReduxCounter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer } from \"react\";\nimport { ADD_COUNTER, CLEAR_COUNTER_DELAY, RESET_COUNTER, SET_COUNTER_DELAY } from \"../events/counter\";\n\ntype State = {\n    count: number,\n    usedDelay?: number | undefined\n}\n\nexport type Counter = State | undefined;\n\nconst counter: Reducer<Counter,ADD_COUNTER | RESET_COUNTER | SET_COUNTER_DELAY | CLEAR_COUNTER_DELAY> = (state, action) => {\n    if (state === undefined) {\n        return {\n            count: 0\n        }\n    }\n    switch(action.type) {\n        case \"COUNTER_ADD\":\n            return {\n                ...state,\n                count: state.count + 1\n            }\n        case \"COUNTER_CLEAR_DELAY\":\n            return {\n                ...state,\n                usedDelay: undefined\n            }\n        case \"COUNTER_SET_DELAY\":\n            return {\n                ...state,\n                usedDelay: action.delay\n            }\n        case \"COUNTER_RESET\":\n            return {\n                ...state,\n                count: 0\n            }\n    }\n    return state;\n}\n\nexport default counter;","import { combineReducers } from \"redux\";\nimport counter, { Counter } from \"./counter\";\n\nexport type AppState = {\n    counter: Counter\n}\n\nexport default combineReducers<AppState>({\n    counter\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport reducers from \"./redux/reducer\";\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from \"redux-saga\";\nimport { watchAddCounterAsync } from './redux/action/counter';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n\nconst store = createStore(reducers,applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(watchAddCounterAsync);\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}